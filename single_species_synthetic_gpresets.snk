import os
from pathlib import Path

# NOT BEFORE RUNNING
# THE ISSUE HERE IS THAT SNAKEMAKE IS EXTREMELY BAD AT HANDLING LARGE WORKFLOW WITH CONDITIONNAL
# EXPRESSIONS SUCH AS THIS ONE. THEREFORE, MOST OF THE TIME WILL BE BE SPEND DOING NOTHING,
# EVEN WORST, SNAKEMAKE WILL TAKE A RIDICULOUS AMOUNT OF RAM FOR NOTHING AT ALL.
# TWO WAYS TO CIRCUMVENT THIS ISSUE:
# 1. RUN YOUR PIPELINE MULTIPLE TIME WITH --until OPTION AND THREE OR LESS FINAL OUTPUT FILES
# 2. RUN YOUR PIPELINE (I THINK IT WOULD WORK BUT DID NOT TEST) UNTIL CHECKPOINT RULES SUCH AS
# run_assembly OR wtdbg2_nanopore USING --until AS WELL

# --------------------------------------------------------------------------------------------------------------------------------------------
# GROUPS SETTING

GROUPS = set(config)
SUBGROUP = [
    'inpref.glopp.hybrid.wtdbg2.long_reads.longshot',
    'inpref.glopp.hybrid.wtdbg2.long_reads.lofreq',
    'inpref.glopp.nanopore.wtdbg2.long_reads.longshot',

    'inpref.glopp.pacbio_bbmap.wtdbg2.long_reads.longshot',
    'inpref.glopp.pacbioe5_bbmap.wtdbg2.long_reads.longshot',
    # 'inpref.glopp.pacbio_bbmap.wtdbg2.long_reads.lofreq',

    'inpref.strainberry.nanopore',

    # 'operams.glopp.hybrid.wtdbg2.long_reads.longshot',
    # 'operams.glopp.hybrid.wtdbg2.long_reads.lofreq',
    # 'operams.strainberry.nanopore',
    #'none.strainxpress.regular'
    ]


GLOPP_PRESETS_NANOPORE = ('gp9', 'gp27', 'gp45', 'gp63', 'gp81', 'gp99', 'gp117', 'gp135', 'gp153', 
    'gp171', 'gp189', 'gp207', 'gp225', 'gp243', 'gp261', 'gp279', 'gp297', 'gp315', 'gp333', 
    'gp351', 'gp369', 'gp387', 'gp405', 'gp423', 'gp441', 'gp459', 'gp477', 'gp495', 'gp513', 
    'gp531', 'gp549', 'gp567', 'gp585', 'gp603', 'gp621', 'gp639')

SUBGROUP = [
    expand('inpref.glopp.nanopore_{gpreset}.wtdbg2.long_reads.longshot', gpreset=GLOPP_PRESETS_NANOPORE)
    #'inpref.glopp.hybrid_preset1.wtdbg2.long_reads.longshot',
    #'inpref.glopp.pacbio_bbmap_preset1.wtdbg2.long_reads.longshot',
]

config['softparams'] = {}

# --------------------------------------------------------------------------------------------------------------------------------------------
# SOFT CONFIGURATION

fname = workflow.source_path('softpaths.json')
with open(fname) as f:
    config['softparams']['soft'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------
# CONDA CONFIGURATION

fname = workflow.source_path('condaenvs.json')
with open(fname) as f:
    config['softparams']['conda'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------

rule all:
    input:      
        'logs/configuration.json',
        expand('stats/assemblies/{group}/inpref.glopp.nanopore_{gpreset}.wtdbg2.long_reads.longshot/mummer/circos/done.empty', 
            group=GROUPS, gpreset=GLOPP_PRESETS_NANOPORE)

        #'vcalling/ecoli/inpref.nanopore.longshot.vcf',
        #'phasing/glopp/ecoli/inpref/pacbio_ccs/longshot',
        #'phasing/assemblies/ecoli/inpref.glopp.pacbio_ccs.wtdbg2.long_reads.longshot.fa.gz'

rule copy_config:
    output:
        'logs/configuration.json'
    params:
        config = config
    script:
        'workflow/scripts/copyconfig.py'

# --------------------------------------------------------------------------------------------------------------------------------------------

module rg:
    snakefile: 'workflow/reference_genomes.snk'
    config: config

use rule * from rg as rg_*

module rc:
    snakefile: "workflow/references_comparison.snk"
    config: config

use rule * from rc as rc_*

module rs:
    snakefile: "workflow/read_simulation.snk"
    config: config

use rule * from rs as rs_*

module rm:
    snakefile: "workflow/read_mapping.snk"
    config: config

use rule * from rm as rm_*

module ra:
    snakefile: "workflow/reads_assembly.snk"
    config: config

use rule * from ra as ra_*

module vc:
    snakefile: "workflow/variants_calling.snk"
    config: config

use rule * from vc as vc_*

module sxp:
    snakefile: "workflow/strainxpress.snk"
    config: config



module sb:
    snakefile: "workflow/strainberry.snk"
    config: config

use rule * from sb as sb_*

module gl:
    snakefile: "workflow/glopp_presets.snk"
    config: config

use rule * from gl as gl_*

module as:
    snakefile: "workflow/haplotype_stats.snk"
    config: config

use rule * from as as as_*
