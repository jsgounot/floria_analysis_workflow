import os
from pathlib import Path

# NOT BEFORE RUNNING
# THE ISSUE HERE IS THAT SNAKEMAKE IS EXTREMELY BAD AT HANDLING LARGE WORKFLOW WITH CONDITIONNAL
# EXPRESSIONS SUCH AS THIS ONE. THEREFORE, MOST OF THE TIME WILL BE BE SPEND DOING NOTHING,
# EVEN WORST, SNAKEMAKE WILL TAKE A RIDICULOUS AMOUNT OF RAM FOR NOTHING AT ALL.
# TWO WAYS TO CIRCUMVENT THIS ISSUE:
# 1. RUN YOUR PIPELINE MULTIPLE TIME WITH --until OPTION AND THREE OR LESS FINAL OUTPUT FILES
# 2. RUN YOUR PIPELINE (I THINK IT WOULD WORK BUT DID NOT TEST) UNTIL CHECKPOINT RULES SUCH AS
# run_assembly OR wtdbg2_nanopore USING --until AS WELL

# --------------------------------------------------------------------------------------------------------------------------------------------
# GROUPS SETTING

GROUPS = set(config)

DEFAULTL = '-l 15000'
DEFAULTE = '-e 0.01'
DEFAULTD = '-d 0.001'
DEFAULTN = '-n 10'
DEFAULTX = '-X' 

def search_preset(cfname, * values):
    with open(cfname) as f:
        d = json.load(f)
    
    found = []

    for k, v in d.items():
        if all(value in v for value in values):
            # print (k, v)
            found.append(k)
    
        #print (k, v)

    return found

cfname = '../../configs/glopp_config.json'
GLOPP_PRESETS = search_preset(cfname, DEFAULTD, DEFAULTN, DEFAULTX)

config['softparams'] = {}

# --------------------------------------------------------------------------------------------------------------------------------------------
# SOFT CONFIGURATION

fname = workflow.source_path('softpaths.json')
with open(fname) as f:
    config['softparams']['soft'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------
# CONDA CONFIGURATION

fname = workflow.source_path('condaenvs.json')
with open(fname) as f:
    config['softparams']['conda'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------

rule all:
    input:      
        'logs/configuration.json',
        expand('stats/assemblies/{group}/inpref.glopp.nanopore_{gpreset}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
            group=GROUPS, gpreset=GLOPP_PRESETS)
        
rule copy_config:
    output:
        'logs/configuration.json'
    params:
        config = config
    script:
        'workflow/scripts/copyconfig.py'

# --------------------------------------------------------------------------------------------------------------------------------------------

module rg:
    snakefile: 'workflow/reference_genomes.snk'
    config: config

use rule * from rg as rg_*

module rc:
    snakefile: "workflow/references_comparison.snk"
    config: config

use rule * from rc as rc_*

module rs:
    snakefile: "workflow/read_simulation.snk"
    config: config

use rule * from rs as rs_*

module rm:
    snakefile: "workflow/read_mapping.snk"
    config: config

use rule * from rm as rm_*

module ra:
    snakefile: "workflow/reads_assembly.snk"
    config: config

use rule * from ra as ra_*

module vc:
    snakefile: "workflow/variants_calling.snk"
    config: config

use rule * from vc as vc_*

module sx:
    snakefile: "workflow/strainxpress.snk"
    config: config

use rule * from sx as sx_*

module sb:
    snakefile: "workflow/strainberry.snk"
    config: config

use rule * from sb as sb_*

module gl:
    snakefile: "workflow/glopp_presets.snk"
    config: config

use rule * from gl as gl_*

module as:
    snakefile: "workflow/haplotype_stats.snk"
    config: config

use rule * from as as as_*
