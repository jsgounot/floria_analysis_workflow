import os
from pathlib import Path

# NOT BEFORE RUNNING
# THE ISSUE HERE IS THAT SNAKEMAKE IS EXTREMELY BAD AT HANDLING LARGE WORKFLOW WITH CONDITIONNAL
# EXPRESSIONS SUCH AS THIS ONE. THEREFORE, MOST OF THE TIME WILL BE BE SPEND DOING NOTHING,
# EVEN WORST, SNAKEMAKE WILL TAKE A RIDICULOUS AMOUNT OF RAM FOR NOTHING AT ALL.
# TWO WAYS TO CIRCUMVENT THIS ISSUE:
# 1. RUN YOUR PIPELINE MULTIPLE TIME WITH --until OPTION AND THREE OR LESS FINAL OUTPUT FILES
# 2. RUN YOUR PIPELINE (I THINK IT WOULD WORK BUT DID NOT TEST) UNTIL CHECKPOINT RULES SUCH AS
# run_assembly OR wtdbg2_nanopore USING --until AS WELL

# --------------------------------------------------------------------------------------------------------------------------------------------
# GROUPS SETTING

GROUPS = set(config)

DEFAULTL = '-l 15000'
DEFAULTE = '-e 0.01'
DEFAULTD = '-d 0.001'
DEFAULTN = '-n 10'
DEFAULTX = '-X' 

def search_preset(cfname, * values):
    with open(cfname) as f:
        d = json.load(f)
    
    found = []

    for k, v in d.items():
        if all(value in v for value in values):
            # print (k, v)
            found.append(k)
    
    return found

cfname = '../../configs/glopp_config.json'
GLOPP_PRESETS = search_preset(cfname, DEFAULTD, DEFAULTN, DEFAULTX)

config['softparams'] = {}

# --------------------------------------------------------------------------------------------------------------------------------------------
# SOFT CONFIGURATION

fname = workflow.source_path('softpaths.json')
with open(fname) as f:
    config['softparams']['soft'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------
# CONDA CONFIGURATION

fname = workflow.source_path('condaenvs.json')
with open(fname) as f:
    config['softparams']['conda'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------
# GP DICS

# old one
gpdic = {
    'illumina': 'illumina_gp9',
    'nanopore': 'nanopore_gp2025',
    'hybrid':   'hybrid_gp1989',
    'hifi':     'pacbio_bbmap_gp1683'
}

gp_illumina = 'illumina_gp9'
gp_nanopore = 'nanopore_gp2439'
gp_hybrid   = 'hybrid_gp2115' # changed it 
gp_hifi     = 'pacbio_bbmap_gp1683'

'''
"gp2439": [
        "-l 75000",
        "-e 0.04",
        "-d 0.001",
        "-n 10",
        "-X"
    ],

"gp2583": [
        "-l 100000",
        "-e 0.005",
        "-d 0.001",
        "-n 10",
        "-X"
    ],
    
"gp2115": [
        "-l 50000",
        "-e 0.005",
        "-d 0.001",
        "-n 10",
        "-X"
    ],

"gp1035": [
        "-l 15000",
        "-e 0.04",
        "-d 0.001",
        "-n 10",
        "-X"
    ],

"gp945": [
        "-l 15000",
        "-e 0.005",
        "-d 0.001",
        "-n 10",
        "-X"
    ],

'''

rule all:
    input:      
        'logs/configuration.json',
        expand('refcomp/{group}.mummer.txt', group=GROUPS),
        expand('refcomp/{group}.fastani.txt', group=GROUPS),
        
        #
        #expand('stats/assemblies/{group}/none.megahit/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/megahit.glopp.{gp_illumina}.abysspe.short_reads.lofreq/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.unicycler_short/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/unicycler_short.glopp.{gp_illumina}.abysspe.short_reads.lofreq/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.strainxpress.regular/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.flye_nanopore_raw/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/flye_nanopore_raw.glopp.{gp_nanopore}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand('stats/assemblies/{group}/flye_nanopore_raw.strainberry.nanopore/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.unicycler_long/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/unicycler_long.glopp.{gp_nanopore}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),    
        #expand('stats/assemblies/{group}/unicycler_long.strainberry.nanopore/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.operams/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand('stats/assemblies/{group}/operams.strainberry.nanopore/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/operams.glopp.{gp_hybrid}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.unicycler_hybrid/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand('stats/assemblies/{group}/unicycler_hybrid.strainberry.nanopore/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/unicycler_hybrid.glopp.{gp_hybrid}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        #
        #expand('stats/assemblies/{group}/none.hifiasm_meta.bbmap.r_utg/mummer/circos/done.empty',
        #    group=GROUPS),
        ## expand('stats/assemblies/{group}/hifiasm_meta.bbmap.m_ctg.glopp.pacbio_bbmap_gp1341.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        ##     group=GROUPS),
        ## expand('stats/assemblies/{group}/hifiasm_meta.bbmap.p_ctg.glopp.pacbio_bbmap_gp1341.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        ##     group=GROUPS),
        ## expand('stats/assemblies/{group}/hifiasm_meta.bbmap.m_ctg.glopp.pacbio_bbmap_gp1341.wtdbg2.long_reads.lofreq/mummer/circos/done.empty',
        ##     group=GROUPS),
        ## expand('stats/assemblies/{group}/hifiasm_meta.bbmap.p_ctg.glopp.pacbio_bbmap_gp1341.wtdbg2.long_reads.lofreq/mummer/circos/done.empty',
        ##     group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/flye_nanopore_raw.glopp.{gp_hifi}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        
        #expand(f'stats/assemblies/{{group}}/inpref.glopp.{gp_illumina}.abysspe.short_reads.lofreq/mummer/circos/done.empty',
        #    group=GROUPS),
        expand(f'stats/assemblies/{{group}}/inpref.glopp.{gp_nanopore}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
            group=GROUPS),
        expand(f'stats/assemblies/{{group}}/inpref.glopp.{gp_hybrid}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
            group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/inpref.glopp.{gp_hifi}.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        
        #expand(f'stats/assemblies/{{group}}/inpref.glopp.hybrid_gp2115.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),

        #expand(f'stats/assemblies/{{group}}/inpref.glopp.hybrid_gp945.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),
        #expand(f'stats/assemblies/{{group}}/inpref.glopp.nanopore_gp1035.wtdbg2.long_reads.longshot/mummer/circos/done.empty',
        #    group=GROUPS),

        expand('stats/assemblies/{group}/inpref.strainberry.nanopore/mummer/circos/done.empty',
            group=GROUPS),

        expand(f'phasing/glopp/{{group}}/inpref/{gp_nanopore}/longshot/glopp.long_reads.readsinfo.gz',
            group=GROUPS),
        expand(f'phasing/glopp/{{group}}/inpref/{gp_hybrid}/longshot/glopp.long_reads.readsinfo.gz',
            group=GROUPS),

rule copy_config:
    output:
        'logs/configuration.json'
    params:
        config = config
    script:
        'workflow/scripts/copyconfig.py'

# --------------------------------------------------------------------------------------------------------------------------------------------

module rg:
    snakefile: 'workflow/reference_genomes.snk'
    config: config

use rule * from rg as rg_*

module rc:
    snakefile: "workflow/references_comparison.snk"
    config: config

use rule * from rc as rc_*

module rs:
    snakefile: "workflow/read_simulation.snk"
    config: config

use rule * from rs as rs_*

module rm:
    snakefile: "workflow/read_mapping.snk"
    config: config

use rule * from rm as rm_*

module ra:
    snakefile: "workflow/reads_assembly.snk"
    config: config

use rule * from ra as ra_*

module vc:
    snakefile: "workflow/variants_calling.snk"
    config: config

use rule * from vc as vc_*

module sx:
    snakefile: "workflow/strainxpress.snk"
    config: config

use rule * from sx as sx_*

module sb:
    snakefile: "workflow/strainberry.snk"
    config: config

use rule * from sb as sb_*

module gl:
    snakefile: "workflow/glopp.snk"
    config: config

use rule * from gl as gl_*

module hs:
    snakefile: "workflow/haplotype_stats.snk"
    config: config

use rule * from hs as hs_*
