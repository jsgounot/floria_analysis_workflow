import os, json
from pathlib import Path
from workflow.scripts import configparser
from workflow.scripts import utilities

GROUPS = set(config['samples'])

# --------------------------------------------------------------------------------------------------------------
# SOFT & CONDA CONFIGURATION
config['softparams'] = {}

fname = workflow.source_path('softpaths.json')
with open(fname) as f:
    config['softparams']['soft'] = json.load(f)

fname = workflow.source_path('condaenvs.json')
with open(fname) as f:
    config['softparams']['conda'] = json.load(f)

config.setdefault('miscs', {})
config['miscs'].setdefault('GENERIC_THREADS', utilities.DEFAULT_GENERIC_THREADS)
config['miscs'].setdefault('GENERIC_THREADS_SPLIT', utilities.DEFAULT_GENERIC_THREADS_SPLIT)

# ---------------------------------------------------------------------------------------------------------------
# WORKFLOW

outputs = configparser.parse_config_production(config['outputs'], GROUPS)

rule all:
    input:
        'logs/configuration.json',
        outputs
        #expand('phasing/floria/presplit/{group}/nanopore/longshot/ploidy.tsv.gz', group=GROUPS),
        #expand('phasing/floria/presplit/{group}/nanopore/longshot/assembly.wtdbg2.long_reads.nano.fa.gz',
        #    group=GROUPS)

rule copy_config:
    output:
        'logs/configuration.json'
    params:
        config = config
    script:
        'workflow/scripts/copyconfig.py'

# ----------------------------------------------------------------------------------------------------------------

rule msp_link_reads_illumina_r1:
    input:
        lambda wc: os.path.abspath(config['samples'][wc.group]['illumina_r1'])
    output:
        'reads/{group}/illumina/merged/R1.fastq.gz'
    shell:
        'ln -s {input} {output}'

rule msp_link_reads_illumina_r2:
    input:
        lambda wc: os.path.abspath(config['samples'][wc.group]['illumina_r2'])
    output:
        'reads/{group}/illumina/merged/R2.fastq.gz'
    shell:
        'ln -s {input} {output}'

rule msp_link_reads_nanopore:
    input:
        lambda wc: os.path.abspath(config['samples'][wc.group]['nanopore'])
    output:
        'reads/{group}/nanopore/merged.fastq.gz'
    shell:
        'ln -s {input} {output}'

# ----------------------------------------------------------------------------------------------------------------

module kr:
    snakefile: "workflow/kraken_ref.snk"
    config: config

use rule * from kr as kr_*

module rm:
    snakefile: "workflow/read_mapping.snk"
    config: config

use rule * from rm as rm_*

module vc:
    snakefile: "workflow/variants_calling.snk"
    config: config

use rule * from vc as vc_*

module flps:
    snakefile: "workflow/floria_presplit.snk"
    config: config

use rule * from flps as flps_*

module flsp:
    snakefile: "workflow/floria_split.snk"
    config: config

use rule * from flsp as flsp_*
