import os
from pathlib import Path

# NOT BEFORE RUNNING
# THE ISSUE HERE IS THAT SNAKEMAKE IS EXTREMELY BAD AT HANDLING LARGE WORKFLOW WITH CONDITIONNAL
# EXPRESSIONS SUCH AS THIS ONE. THEREFORE, MOST OF THE TIME WILL BE BE SPEND DOING NOTHING,
# EVEN WORST, SNAKEMAKE WILL TAKE A RIDICULOUS AMOUNT OF RAM FOR NOTHING AT ALL.
# TWO WAYS TO CIRCUMVENT THIS ISSUE:
# 1. RUN YOUR PIPELINE MULTIPLE TIME WITH --until OPTION AND THREE OR LESS FINAL OUTPUT FILES
# 2. RUN YOUR PIPELINE (I THINK IT WOULD WORK BUT DID NOT TEST) UNTIL CHECKPOINT RULES SUCH AS
# run_assembly OR wtdbg2_nanopore USING --until AS WELL

# --------------------------------------------------------------------------------------------------------------------------------------------
# GROUPS SETTING

GROUPS = set(config)

# --------------------------------------------------------------------------------------------------------------------------------------------
# SOFT & CONDA CONFIGURATION
config['softparams'] = {}

fname = workflow.source_path('softpaths.json')
with open(fname) as f:
    config['softparams']['soft'] = json.load(f)

fname = workflow.source_path('condaenvs.json')
with open(fname) as f:
    config['softparams']['conda'] = json.load(f)

# --------------------------------------------------------------------------------------------------------------------------------------------
# WORKFLOW

rule all:
    input:      
        'logs/configuration.json',  
        #expand('refcomp/{group}.mummer.txt', group=GROUPS),
        #expand('refcomp/{group}.fastani.txt', group=GROUPS),
        
        expand('phasing/floria/presplit/{group}/nanopore/longshot/ploidy.tsv.gz', group=GROUPS),
        # expand('phasing/floria/presplit/{group}/illumina/longshot/ploidy.tsv.gz', group=GROUPS),

        expand('stats/assemblies/{group}/kraken_ref.nanopore.longshot.floria.wtdbg2.long_reads.nano/mummer/circos/done.empty',
            group=GROUPS),
        #expand('stats/assemblies/{group}/kraken_ref.nanopore.longshot.floria.flye.long_reads.none/mummer/circos/done.empty',
        #    group=GROUPS),
        expand('stats/assemblies/{group}/kraken_ref.nanopore.strainberry/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/kraken_presplit.nanopore.longshot.floria.wtdbg2.long_reads.nano/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/kraken_presplit.nanopore.longshot.floria.flye.long_reads.none/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/flye_nanopore_raw/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/megahit/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/strainxpress.fast/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/kraken_presplit.illumina.longshot.floria.abysspe.short_reads.none/mummer/circos/done.empty',
            group=GROUPS),
        expand('stats/assemblies/{group}/kraken_presplit.illumina.longshot.floria.megahit.short_reads.none/mummer/circos/done.empty',
            group=GROUPS)

# {assembling}.{ass_reads}.{vcalling}.{phaser}.{phaser_mode}.{subassembler}.{subassembler_reads}.{subassembler_preset}
# assembling = kraken_split, kraken_merged, none, assembly


rule copy_config:
    output:
        'logs/configuration.json'
    params:
        config = config
    script:
        'workflow/scripts/copyconfig.py'

# --------------------------------------------------------------------------------------------------------------------------------------------

module rg:
    snakefile: 'workflow/reference_genomes.snk'
    config: config

use rule * from rg as rg_*

module rc:
    snakefile: "workflow/references_comparison.snk"
    config: config

use rule * from rc as rc_*

module rs:
    snakefile: "workflow/read_simulation.snk"
    config: config

use rule * from rs as rs_*

module rm:
    snakefile: "workflow/read_mapping.snk"
    config: config

use rule * from rm as rm_*

module ra:
    snakefile: "workflow/reads_assembly.snk"
    config: config

use rule * from ra as ra_*

module kr:
    snakefile: "workflow/kraken_ref.snk"
    config: config

use rule * from kr as kr_*

module vc:
    snakefile: "workflow/variants_calling.snk"
    config: config

use rule * from vc as vc_*

module sx:
    snakefile: "workflow/strainxpress.snk"
    config: config

use rule * from sx as sx_*

module sbsi:
    snakefile: "workflow/strainberry_single.snk"
    config: config

use rule * from sbsi as sbsi_*

module sbsp:
    snakefile: "workflow/strainberry_split.snk"
    config: config

use rule * from sbsp as sbsp_*

module flps:
    snakefile: "workflow/floria_presplit.snk"
    config: config

use rule * from flps as flps_*

module flsp:
    snakefile: "workflow/floria_split.snk"
    config: config

use rule * from flsp as flsp_*

module flsi:
    snakefile: "workflow/floria_single.snk"
    config: config

use rule * from flsi as flsi_*

module hs:
    snakefile: "workflow/haplotype_stats.snk"
    config: config

use rule * from hs as hs_*
