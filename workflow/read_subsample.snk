import os

class MissingInputException(Exception):
    pass

def get_sample_info(config, wc, keyword, default=None):
    value = config['samples'][wc.group][wc.sample].get(keyword, default)
    if value is None:
        raise MissingInputException(f'Missing subsampling keyword "{keyword}" in your configuration file for group "{wc.group}" and sample "{wc.sample}".')
    return value

rule subsample_illumina:
    input:
        r1  = lambda wc: get_sample_info(config, wc, 'illumina_r1'),
        r2  = lambda wc: get_sample_info(config, wc, 'illumina_r2'),
        ref = 'references/used/{group}/sample/{sample}.fasta'
    output:
        r1o = temp('reads/{group}/illumina/{sample}_R1.fastq.gz'),
        r2o = temp('reads/{group}/illumina/{sample}_R2.fastq.gz'),
    params:
        cov  = lambda wc: get_sample_info(config, wc, 'quantity'),
        seed = lambda wc: get_sample_info(config, wc, 'seed', 1)
    script:
        'scripts/read_subsample_illumina.py'

rule subsample_merge_illumina:
    input:
        lambda wc: [f'reads/{{group}}/illumina/{sample}_{{ridx}}.fastq.gz' for sample in config[wc.group]]
    output:
        temp('reads/{group}/illumina/merged/{ridx}.fastq.gz')
    shell:
        'cat {input} > {output}'

rule subsample_nanopore:
    input:
        reads = lambda wc: get_sample_info(config, wc, 'nanopore'),
        ref  = 'references/used/{group}/sample/{sample}.fasta'
    output:
        temp('reads/{group}/nanopore/{sample}.fastq.gz')
    params:
        cov  = lambda wc: get_sample_info(config, wc, 'quantity'),
        seed = lambda wc: get_sample_info(config, wc, 'seed', 1)
    script:
        'scripts/read_subsample_nanopore.py'

rule subsample_merge_nanopore:
    input:
        lambda wc: [f'reads/{{group}}/nanopore/{sample}.fastq.gz' for sample in config['samples'][wc.group]]
    output:
        temp('reads/{group}/nanopore/merged.fastq.gz')
    shell:
        'cat {input} > {output}'