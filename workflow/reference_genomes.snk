from pathlib import Path
from scripts.utilities import get_mapping_ref, get_ref, get_sim_param

rule download_ncbinuc:
    output:
        'references/download/{group}/ncbinuc_{ncbiid}.fasta'
    conda:
        config['softparams']['conda']['entrez']
    resources:
        ncbi_load=1
    shell:
        'efetch -db nucleotide -id "{wildcards.ncbiid}" -mode text -format fasta > {output} && [[ -s {output} ]]'

rule download_ncbiasbly:
    output:
        'references/download/{group}/ncbiasbly_{ncbiid}.fasta'
    conda:
        config['softparams']['conda']['entrez']
    resources:
        ncbi_load=1
    shell:
        'esearch -db assembly -query "{wildcards.ncbiid}" | elink -target nucleotide -name assembly_nuccore_refseq | efetch -format fasta > {output} && [[ -s {output} ]]'

rule simu_perso:
    input:
        ref = lambda wc: get_sim_param(wc, config, 'ref')
    output:
        'references/simulated/{group}/{sample}.simseq.genome.fa'
    params:
        snps_rate = lambda wc: get_sim_param(wc, config, 'snp_prc') / 100
    script:
        'scripts/rg_simulate_mutate.py'

rule link_fasta:
    input:
        lambda wc: get_ref(wc, config)
    output:
        'references/used/{group}/sample/{sample}.fasta'
    run:
        if input[0].endswith('gz'):
            shell('zcat {input} > {output}')
        else :
            shell('ln -s $(pwd)/{input} {output}')

rule refmap:
    input:
        lambda wc: get_mapping_ref(wc, config)
    output:
        'references/used/{group}/refmap/inpref.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule fasta_index:
    input:
        'references/used/{group}/refmap/{refori}.fa'
    output:
        'references/used/{group}/refmap/{refori}.fa.fai'
    conda:
        config['softparams']['conda']['minimap2']
    shell:
        'samtools faidx {input}'

rule subtrack_ref:
    # This function make the link between
    # references_comparison.snk:mummer_sim_segs output
    # that is needed by haplotype_stats.snk:rename_fasta_ref
    # when a similarity and length threshold is provided
    input:
        reffasta = rules.link_fasta.output[0],
        simtrack = 'refcomp/{group}.simtracks.reverse.{sim}.{length}.tsv.gz'
    output:
        'references/used/{group}/sim_filtered/{sample}.{sim}.{length}.fasta'
    script:
        'scripts/rg_subtrack_ref.py'