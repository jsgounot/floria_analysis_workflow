rule lofreq:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        aln   = 'mapping/{group}/{refori}.{readtype}.bam'
    output:
        'vcalling/{group}/{refori}.{readtype}.lofreq.vcf'
    conda:
        config['softparams']['conda']['lofreq']
    log:
        'logs/{group}/vcalling.{refori}.{readtype}.lofreq.log'
    benchmark:
        'benchmarks/{group}/vcalling.{refori}.{readtype}.lofreq.txt'
    shell:
        'lofreq call -f {input.fasta} -o {output} {input.aln} --verbose 2> {log}'

rule longshot:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        aln   = 'mapping/{group}/{refori}.{readtype}.bam',
        bai   = 'mapping/{group}/{refori}.{readtype}.bam.bai'
    output:
        'vcalling/{group}/{refori}.{readtype}.longshot.vcf'
    conda:
        config['softparams']['conda']['longshot']
    log:
        'logs/{group}/vcalling.{refori}.{readtype}.longshot.log'
    benchmark:
        'benchmarks/{group}/vcalling.{refori}.{readtype}.longshot.txt'
    shell:
        'longshot --ref {input.fasta} --out {output} --bam {input.aln} -F -n 2> {log}'

rule binomial_custom:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        aln   = 'mapping/{group}/{refori}.{readtype}.bam',
        bai   = 'mapping/{group}/{refori}.{readtype}.bam.bai'
    output:
        'vcalling/{group}/{refori}.{readtype}.binocustom.vcf'
    conda:
        config['softparams']['conda']['pysam']
    log:
        'logs/{group}/vcalling.{refori}.{readtype}.binocustom.log'
    benchmark:
        'benchmarks/{group}/vcalling.{refori}.{readtype}.binocustom.txt'
    script:
        'scripts/vcalling_binocustom.py'

rule vcaller_gzip:
    input:
        'vcalling/{group}/{refori}.{readtype}.{vcaller}.vcf'
    output:
        'vcalling/{group}/{refori}.{readtype}.{vcaller}.vcf.gz'
    shell:
        'gzip {input}'

rule floria_add_header:
    input:
        rules.vcaller_gzip.output[0]
    output:
        'vcalling/{group}/{refori}.{readtype}.{vcaller}.floria_vcf_header'
    script:
        'scripts/floria_vcf_header.py'

# ----------------------------------------------------------------
# Pre-split mapping

use rule lofreq as lofreq_presplit with:
    input:
        fasta = 'kraken/{group}/ref.{krtype}.fa',
        fai   = 'kraken/{group}/ref.{krtype}.fa.fai',
        aln   = 'kraken/{group}/{krtype}.filtered.bam',
    output:
        'vcalling/{group}/presplit/{krtype}.lofreq.vcf'
    conda:
        config['softparams']['conda']['lofreq']
    log:
        'logs/{group}/presplit/vcalling.{krtype}.lofreq.log'
    benchmark:
        'benchmarks/{group}/presplit/vcalling.{krtype}.lofreq.txt'

use rule longshot as longshot_presplit with:
    input:
        fasta = 'kraken/{group}/ref.{krtype}.fa',
        fai   = 'kraken/{group}/ref.{krtype}.fa.fai',
        aln   = 'kraken/{group}/{krtype}.filtered.bam',
        bai   = 'kraken/{group}/{krtype}.filtered.bam.bai'
    output:
        'vcalling/{group}/presplit/{krtype}.longshot.vcf'
    log:
        'logs/{group}/presplit/vcalling.{krtype}.longshot.log'
    benchmark:
        'benchmarks/{group}/presplit/vcalling.{krtype}.longshot.txt'

use rule vcaller_gzip as vcaller_gzip_presplit with:
    input:
        'vcalling/{group}/presplit/{krtype}.{vcaller}.vcf'
    output:
        'vcalling/{group}/presplit/{krtype}.{vcaller}.vcf.gz'

use rule floria_add_header as floria_add_header_presplit with:
    input:
        rules.vcaller_gzip_presplit.output[0]
    output:
        'vcalling/{group}/presplit/{krtype}.{vcaller}.floria_vcf_header'

# ----------------------------------------------------------------
# Split mapping

use rule lofreq as lofreq_split with:
    input:
        fasta = 'kraken/{group}/split/bamfa/{tid}.{krtype}.fa',
        fai   = 'kraken/{group}/split/bamfa/{tid}.{krtype}.fa.fai',
        aln   = 'kraken/{group}/split/bamfa/{tid}.{krtype}.sorted.bam',
    output:
        'vcalling/{group}/split/{tid}.{krtype}.lofreq.vcf'
    conda:
        config['softparams']['conda']['lofreq']
    log:
        'logs/{group}/split/vcalling.{tid}.{krtype}.lofreq.log'
    benchmark:
        'benchmarks/{group}/split/vcalling.{tid}.{krtype}.lofreq.txt'

use rule longshot as longshot_split with:
    input:
        fasta = 'kraken/{group}/split/bamfa/{tid}.{krtype}.fa',
        fai   = 'kraken/{group}/split/bamfa/{tid}.{krtype}.fa.fai',
        aln   = 'kraken/{group}/split/bamfa/{tid}.{krtype}.sorted.bam',
        bai   = 'kraken/{group}/split/bamfa/{tid}.{krtype}.sorted.bam.bai'
    output:
        'vcalling/{group}/split/{tid}.{krtype}.longshot.vcf'
    log:
        'logs/{group}/split/vcalling.{tid}.{krtype}.longshot.log'
    benchmark:
        'benchmarks/{group}/split/vcalling.{tid}.{krtype}.longshot.txt'

use rule vcaller_gzip as vcaller_gzip_split with:
    input:
        'vcalling/{group}/split/{tid}.{krtype}.{vcaller}.vcf'
    output:
        'vcalling/{group}/split/{tid}.{krtype}.{vcaller}.vcf.gz'

use rule floria_add_header as floria_add_header_split with:
    input:
        rules.vcaller_gzip_split.output[0]
    output:
        'vcalling/{group}/split/{tid}.{krtype}.{vcaller}.floria_vcf_header'