import glob, os, json
from scripts.utilities import get_mapping_ref, is_nonempty_gz_file

WTDBG2PRESETS = {
    'pacbio_bbmap': 'hifi',
    'pacbioe5_bbmap': 'hifi',
    'nanopore': 'nanopore',
    'hybrid': 'nanopore'
}

wildcard_constraints:
    vcaller="longshot|lofreq"

rule link_vcf:
    input:
        'vcalling/{group}/{refori}.{readtype}.{vcaller}.vcf'
    output:
        'phasing/glopp/{group}/{refori}.{readtype}.{vcaller}.vcf'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule add_header:
    input:
        rules.link_vcf.output
    output:
        'phasing/glopp/{group}/{refori}.{readtype}.{vcaller}.vcfc_header'
    script:
        'scripts/glopp_vcf_header.py'

# Might be useless afterall, keep for archive
rule filter_bam:
    input:
        'mapping/{group}/{refori}.{readtype}.bam'
    output:
        temp('phasing/glopp/tmp_bamfile/{group}.{refori}.{readtype}.filtered.bam')
    conda:
        config['softparams']['conda']['minimap2']
    shell:
        "samtools view -h {input} | awk '!seen[$1]++ || /^@/' | samtools view -b -h > {output}"

rule index_bam:
    input:
        'phasing/glopp/tmp_bamfile/{group}.{refori}.{readtype}.filtered.bam'
    output:
        temp('phasing/glopp/tmp_bamfile/{group}.{refori}.{readtype}.filtered.bam.bai')
    conda:
        config['softparams']['conda']['minimap2']
    shell:
        'samtools index {input}'

# --------------------------------------------------------------------------------------------------

def make_glopp_options(wc):
    fname = '/mnt/volume1/strainphasing/glopp_analysis_workflow/configs/glopp_config.json'
    with open(fname) as f:
        d = json.load(f)
    return ' '.join(d[wc.preset])

rule glopp_illumina:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.illumina.bam',
        bai   = 'mapping/{group}/{refori}.illumina.bam.bai',
        vcf   = 'phasing/glopp/{group}/{refori}.illumina.{vcaller}.vcfc_header',
        exe   = config['softparams']['soft']['glopp']
    output:
        outdir = directory('phasing/glopp/{group}/{refori}/illumina_{preset}/{vcaller}')
    benchmark:
        'benchmarks/{group}/glopp.{refori}.illumina_{preset}.{vcaller}.txt'
    conda:
        config['softparams']['conda']['glopp']
    params:
        preset_opts = make_glopp_options
    threads:
        16
    log:
        'logs/{group}/glopp.{refori}.illumina_{preset}.{vcaller}.log'
    shell:
        '{input.exe} -b {input.bam} -c {input.vcf} -o {output.outdir} -t {threads} -R {input.fasta} {params.preset_opts} > {log}'

rule glopp_nanopore:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.nanopore.bam',
        bai   = 'mapping/{group}/{refori}.nanopore.bam.bai',
        vcf   = 'phasing/glopp/{group}/{refori}.nanopore.{vcaller}.vcfc_header',
        exe   = config['softparams']['soft']['glopp']
    output:
        outdir = directory('phasing/glopp/{group}/{refori}/nanopore_{preset}/{vcaller}')
    benchmark:
        'benchmarks/{group}/glopp.{refori}.nanopore_{preset}.{vcaller}.txt'
    conda:
        config['softparams']['conda']['glopp']
    params:
        preset_opts = make_glopp_options
    threads:
        16
    log:
        'logs/{group}/glopp.{refori}.nanopore_{preset}.{vcaller}.log'
    shell:
        '{input.exe} -b {input.bam} -c {input.vcf} -o {output.outdir} -t {threads} -R {input.fasta} {params.preset_opts} > {log}' 

rule glopp_hybrid:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.nanopore.bam',
        bai   = 'mapping/{group}/{refori}.nanopore.bam.bai',
        short = 'mapping/{group}/{refori}.illumina.bam',
        vcf   = 'phasing/glopp/{group}/{refori}.illumina.{vcaller}.vcfc_header',
        exe   = config['softparams']['soft']['glopp']
    output:
        outdir = directory('phasing/glopp/{group}/{refori}/hybrid_{preset}/{vcaller}')
    benchmark:
        'benchmarks/{group}/glopp.{refori}.hybrid_{preset}.{vcaller}.txt'
    conda:
        config['softparams']['conda']['glopp']
    params:
        preset_opts = make_glopp_options
    threads:
        16
    log:
        'logs/{group}/glopp.{refori}.hybrid_{preset}.{vcaller}.log'
    shell:
        '{input.exe} -b {input.bam} -c {input.vcf} -o {output.outdir} -t {threads} -R {input.fasta} -H {input.short} --reassign-short {params.preset_opts} > {log}'

rule glopp_pacbio:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.pacbio_{model}.bam',
        bai   = 'mapping/{group}/{refori}.pacbio_{model}.bam.bai',
        vcf   = 'phasing/glopp/{group}/{refori}.pacbio_{model}.{vcaller}.vcfc_header',
        exe   = config['softparams']['soft']['glopp']
    output:
        outdir = directory('phasing/glopp/{group}/{refori}/pacbio_{model}_{preset}/{vcaller}')
    benchmark:
        'benchmarks/{group}/glopp.{refori}.pacbio_{model}_{preset}.{vcaller}.txt'
    conda:
        config['softparams']['conda']['glopp']
    params:
        preset_opts = make_glopp_options
    threads:
        16
    log:
        'logs/{group}/glopp/{refori}.pacbio_{model}_{preset}.{vcaller}.log'
    shell:
        '{input.exe} -b {input.bam} -c {input.vcf} -o {output.outdir} -t {threads} -R {input.fasta} {params.preset_opts} > {log}'

checkpoint run_assembly:
    input:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}'
    output: 
        temp(touch('phasing/glopp/{group}/{refori}/{gmode}/{vcaller}.done'))

# ------------------------------------------------------------------------------------------------------------------------------------------
# WTDBG Assembly

checkpoint wtdbg2_nanopore:
    input:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}.fastq'
    output:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.nanopore.ctg.lay.gz'
    params:
        preset = '-x preset2 -e 5 -l 1000 -L 3000 -S 1 -R',
        of = 'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.nanopore'
    conda:
        config['softparams']['conda']['wtdbg2']
    log:
        'logs/{group}/glopp_wtdbg2/wtdbg2.{group}.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.nanopore.log'
    benchmark:
        'benchmarks/{group}/glopp_wtdbg2/wtdbg2.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.nanopore.txt'
    threads:
        4
    shell:
        'wtdbg2 {params.preset} -t {threads} -i {input} -o {params.of} 2> {log}'

checkpoint wtdbg2_hifi:
    input:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}.fastq'
    output:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.hifi.ctg.lay.gz'
    params:
        preset = '-x ccs -R',
        of = 'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.hifi'
    conda:
        config['softparams']['conda']['wtdbg2']
    log:
        'logs/{group}/glopp_wtdbg2/wtdbg2.{group}.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.hifi.log'
    benchmark:
        'benchmarks/{group}/glopp_wtdbg2/wtdbg2.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.hifi.txt'
    threads:
        4
    shell:
        'wtdbg2 {params.preset} -t {threads} -i {input} -o {params.of} 2> {log}'

rule wtpoa_run:
    input:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.{wpreset}.ctg.lay.gz'
    output:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.{wpreset}.ctg.run.fa'
    conda:
        config['softparams']['conda']['wtdbg2']
    log:
        'logs/{group}/glopp_wtdbg2/wtpoa.{group}.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.{wpreset}.log'
    benchmark:
        'benchmarks/{group}/glopp_wtdbg2/wtpoa.{refori}.{gmode}.{vcaller}.{contigID}.{rtype}.{partID}.{wpreset}.txt'
    threads:
        4
    shell:
        'wtpoa-cns -t {threads} -i {input} -fo {output} 2> {log}'

rule wtpoa_empty:
    output:
        touch('phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.{wpreset}.ctg.empty.fa')

def check_wtdgb2_out(wildcards):
    wpreset = wildcards['wpreset']
    if wpreset == 'hifi':
        wtbg2res = str(checkpoints.wtdbg2_hifi.get(** wildcards).output)
    elif wpreset == 'nanopore':
        wtbg2res = str(checkpoints.wtdbg2_nanopore.get(** wildcards).output)
    else:
        raise Exception (f'No wtdbg2 rule for preset {wpreset}')

    if is_nonempty_gz_file(wtbg2res):
        return wtbg2res[:-7] + '.run.fa'
    else:
        return wtbg2res[:-7] + '.empty.fa'

rule wtpoa_join:
    input:
        check_wtdgb2_out
    output:
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{contigID}/{rtype}/{partID}/{partID}.{wpreset}.ctg.fa'
    shell:
        'mv {input} {output}'

# ------------------------------------------------------------------------------------------------------------------------------------------

def aggregate_input_wtgdb2(wildcards):
    checkpoint_output = checkpoints.run_assembly.get(** wildcards).output[0][:-5]
    f = os.path.join(checkpoint_output, '*', wildcards.rtype, '*.fastq')
    f = glob.glob(f)

    # Important here, we define the wtdbg2 preset based on the used glopp mode
    gmode = wildcards.gmode
    if gmode.startswith('nanopore'):
        gmode = 'nanopore'
    elif gmode.startswith('hifi'):
        gmode = 'hifi'
    else:
        raise Exception(f'Unable to define preset for {gmode}')

    wpreset  = WTDBG2PRESETS[gmode]

    for idx, fname in enumerate(f):

        if os.stat(fname).st_size == 0:
            # Sometime we have empty files, we juste ignore them
            continue

        partID = os.path.basename(fname)[:-6]
        f[idx] = os.path.join(os.path.dirname(fname), partID, partID + '.' + wpreset + '.ctg.fa')

    return f

rule wtdbg2_merge:
    input:
        aggregate_input_wtgdb2
    output:
        'phasing/assemblies/{group}/{refori}.glopp.{gmode}.wtdbg2.{rtype}.{vcaller}.fa'
    script:
        'scripts/glopp_wtdbg2_merger.py'

rule wtdbg2_compress_intermediate:
    input:
        rules.wtdbg2_merge.output
    output: 
        'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/{rtype}.wtdbg2.tar.gz'
    params:
        path = 'phasing/glopp/{group}/{refori}/{gmode}/{vcaller}/*/{rtype}/*_part'
    shell:
        'tar -czf {output} {params.path} --remove-files'

rule wtdbg2_compress_fasta:
    # Here we make sure we also compressed and remove all the small but numerous files
    # for clusters with file numbers limits (same as strainberry)
    input:
        ic = rules.wtdbg2_compress_intermediate.output,
        fa = rules.wtdbg2_merge.output
    output:
        'phasing/assemblies/{group}/{refori}.glopp.{gmode}.wtdbg2.{rtype}.{vcaller}.fa.gz'
    shell:
        'gzip {input.fa}'

rule uncompress:
    input:
        rules.wtdbg2_compress_fasta.output
    output: 
        temp('temp/assemblies/{group}/{refori}.glopp.{gmode}.{assembler}.{rtype}.{vcaller}.fa')
    shell:
        'zcat {input} > {output}'
