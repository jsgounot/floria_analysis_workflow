import glob, os, json
from scripts import utilities

wildcard_constraints:
    vcaller="longshot|lofreq|binocustom|freebayes",
    rtype="long_reads|short_reads",

# ------------------------------------------------------------------------------------------------------------------------------------------
# Floria

FMODES = {
    'fp0': '-l 100 -d 0.0001',
    'fp1': '-l 100 -d 0.0005 -e 0.01'
}

rule floria:
    input:
        fasta = 'kraken/{group}/ref.{krtype}.fa',
        fai   = 'kraken/{group}/ref.{krtype}.fa.fai',
        bam   = 'kraken/{group}/main/{krtype}.bam',
        bai   = 'kraken/{group}/main/{krtype}.bam.bai',
        vcf   = 'vcalling/{group}/presplit/{krtype}.{vcaller}.floria_vcf_header'
    output:
        directory('phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir/{fmode}/')
    params:
        exe = utilities.get_softpath(config, 'floria')
    conda:
        config['softparams']['conda']['floria']
    threads:
        config['miscs']['GENERIC_THREADS']
    log:
        'logs/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.log'
    benchmark:
        'benchmarks/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.txt'
    shell:
        '{params.exe} -b {input.bam} -v {input.vcf} -o {output} -t {threads} -r {input.fasta} \
            --output-reads --gzip-reads > {log}'

# ------------------------------------------------------------------------------------------------------------------------------------------
# Post-processing
# This part is made to compress all directory for both space and files number reduction

rule compress:
    input:
        rules.floria.output[0]
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir.{fmode}.tar.gz'
    priority:
        1
    shell:
        'tar czf {output} {input}/* --remove-files'

rule uncompress:
    input:
        rules.compress.output[0]
    output:
        temp(touch('phasing/floria/presplit/{group}/{krtype}/{vcaller}/floria.{fmode}.{rtype}.{assembler}.uncompressed'))
    shell:
        'tar xzf {input} --transform "s/fastq.gz/{wildcards.assembler}.fastq.gz/" --wildcards "*/{wildcards.rtype}/*.fastq.gz"'

rule ploidy_table:
    input:
        archive = rules.compress.output[0],
        fasta = 'kraken/{group}/ref.{krtype}.fa',
        kraken = 'kraken/{group}/kraken.{krtype}.report.cov.tsv',
        depth = 'kraken/{group}/main/{krtype}.bam.cov.tsv.gz',
        vcf = 'vcalling/{group}/presplit/{krtype}.{vcaller}.floria_vcf_header'
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/ploidy.{fmode}.tsv.gz'
    script:
        'scripts/floria_ploidy_table.py'

# ------------------------------------------------------------------------------------------------------------------------------------------
# Assembly

# I end up using a script for each assembly process here to make all the assemblies with one single rule
# as fast, not overloading output, still work asynchroniously. Best decision I took during the last months

# Note regarding unicyler
# I decided to not use it because unicycler uses Spades under the hood
# which is perfectly fine with regular good coverage genomes
# but crashes when coverage is low which happens quite a lot when
# dealing with this kind of cases (or short-binning as well for example)
# I'm using abysspe instead but maybe something better could be use

WTDBG2PRESETS = {
    'hifi': '-x ccs -R',
    'nano': '-x preset2 -e 5 -l 1000 -L 3000 -S 1 -R'
}

rule wtdbg2:
    input:
        reads_ar = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir..{fmode}tar.gz',
        flag = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/floria.{rtype}.wtdbg2.uncompressed'
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.{fmode}.wtdbg2.{rtype}.{preset}.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    params:
        preset = lambda wc: WTDBG2PRESETS[wc.preset]
    conda:
        config['softparams']['conda']['wtdbg2']
    log:
        'logs/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.wtdbg2.{rtype}.{preset}.log'
    benchmark:
        'benchmarks/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.wtdbg2.{rtype}.{preset}.txt'
    script:
        'scripts/floria_run_wtdbg2.py'

rule flye:
    input:
        reads_ar = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir.{fmode}.tar.gz',
        flag = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/floria.{fmode}.{rtype}.flye.uncompressed'
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.{fmode}.flye.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    params:
        kmersize = 16
    conda:
        config['softparams']['conda']['flye']
    log:
        'logs/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.flye.{rtype}.none.log'
    benchmark:
        'benchmarks/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.flye.{rtype}.none.txt'
    script:
        'scripts/floria_run_flye.py'

rule abysspe:
    input:
        reads_ar = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir.tar.gz',
        flag = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/floria.{rtype}.abysspe.uncompressed'
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.abysspe.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    conda:
        config['softparams']['conda']['abyss']
    log:
        'logs/{group}/floria.presplit.{krtype}.{vcaller}.abysspe.{rtype}.log'
    benchmark:
        'benchmarks/{group}/floria.presplit.{krtype}.{vcaller}.abysspe.{rtype}.txt'
    script:
        'scripts/floria_run_abysspe.py'

rule megahit:
    input:
        reads_ar = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/wdir.{fmode}.tar.gz',
        flag = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/floria.{fmode}.{rtype}.megahit.uncompressed'
    output:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.{fmode}.megahit.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    conda:
        config['softparams']['conda']['megahit']
    log:
        'logs/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.megahit.{rtype}.log'
    benchmark:
        'benchmarks/{group}/floria.{fmode}.presplit.{krtype}.{vcaller}.megahit.{rtype}.txt'
    script:
        'scripts/floria_run_megahit.py'

rule get_assembly:
    input:
        fasta = 'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.{fmode}.{assembler}.{rtype}.{preset}.fa.gz'
    output:
        temp('temp/assemblies/{group}/kraken_ref_merged.{krtype}.{vcaller}.floria.{fmode}.{assembler}.{rtype}.{preset}.fa')
    shell:
        'zcat {input.fasta} > {output}'

# -------------------
# Production pipeline

rule link_assembly_prod:
    input:
        'phasing/floria/presplit/{group}/{krtype}/{vcaller}/assembly.{fmode}.{assembler}.{rtype}.{preset}.fa.gz'
    output:
        'results/{group}/phasing/floria/kraken_ref_merged.{krtype}.{vcaller}.floria.{fmode}.{assembler}.{rtype}.{preset}.fa.gz'
    shell:
        'ln -s $(pwd)/{input.fasta} {output}'

rule link_ploidy_prod:
    input:
        rules.ploidy_table.output[0]
    output:
        'results/{group}/phasing/floria/kraken_ref_merged.{krtype}.{vcaller}.floria.{fmode}.tsv.gz'
    shell:
        'ln -s $(pwd)/{input} {output}'