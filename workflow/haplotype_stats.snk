# IMPORTANT: We need to sort the samples!!
SAMPLES = {group: sorted(samples) for group, samples in config['samples'].items()}
get_clean_ref_idx = lambda wc: f'references/used/{wc.group}/sample/{SAMPLES[wc.group][int(wc.idx)]}.{wc.sim}.{wc.length}.clean.fasta'
get_clean_refs = lambda wc: [f'references/used/{wc.group}/sample/{sample}.{wc.sim}.{wc.length}.clean.fasta'
    for sample in SAMPLES[wc.group]]
get_clean_refs_dict = lambda wc: {sample: f'references/used/{wc.group}/sample/{sample}.{wc.sim}.{wc.length}.clean.fasta'
    for sample in SAMPLES[wc.group]}

# We need to rename references contigs to avoid
# duplicated contig names, leading to circos issues

rule rename_fasta_query:
    input:
        'temp/assemblies/{group}/{basename}.fa'
    output:
        temp('stats/assemblies/{group}/{basename}/ref.fa')
    params:
        sample = lambda wc: wc.basename
    script:
        'scripts/assemblies_stats_rename_fasta.py'

def get_ref(wc):
    if wc.sim == 'none' or wc.length == 'none':
        return 'references/used/{group}/sample/{sample}.fasta'
    else:
        return 'references/used/{group}/sim_filtered/{sample}.{sim}.{length}.fasta'

rule rename_fasta_ref:
    input:
        get_ref
    output:
        'references/used/{group}/sample/{sample}.{sim}.{length}.clean.fasta'
    params:
        sample = lambda wc: wc.sample
    script:
        'scripts/assemblies_stats_rename_fasta.py'

rule mummer_nucmer:
    input:
        query = 'stats/assemblies/{group}/{basename}/ref.fa',
        ref = get_clean_ref_idx 
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.delta'
    params:
        prefix = 'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}'
    threads:
        4
    conda:
        config['softparams']['conda']['mummer']
    shell:
        'nucmer --maxmatch -t {threads} -p {params.prefix} {input.ref} {input.query}'

rule mummer_delta_filter:
    input:
        rules.mummer_nucmer.output
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.qdelta'
    conda:
        config['softparams']['conda']['mummer']
    shell:
        'delta-filter -q {input} > {output}'

rule mummer_show_coords:
    input:
        rules.mummer_delta_filter.output
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.qcoords'
    conda:
        config['softparams']['conda']['mummer']
    shell:
        'show-coords -qHTlc {input} > {output}'

def get_qcoords(wildcards):
    count = len(SAMPLES[wildcards.group])
    group = [wildcards.group for _ in range(count)]
    basename = [wildcards.basename for _ in range(count)]
    idx = list(range(count))

    return expand( 
        f'stats/assemblies/{{group}}/{{basename}}/mummer/{{idx}}.{wildcards.sim}.{wildcards.length}.qcoords',
        zip, group=group, basename=basename, idx=idx
        )

rule extract_best_results:
    input:
        get_qcoords
    output:
        'stats/assemblies/{group}/{basename}/mummer/best_results.{sim}.{length}.tsv'
    conda:
        config['softparams']['conda']['mummer']
    script:
        'scripts/assemblies_stats_analyse_nucmer.py'

checkpoint make_best_subfa:
    input:
        table = rules.extract_best_results.output,
        query = 'stats/assemblies/{group}/{basename}/ref.fa'
    params:
        idx = lambda wc: wc.idx
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.fa'
    script:
        'scripts/assemblies_stats_extract.py'

rule mummer_nucmer_best:
    input:
        query = rules.make_best_subfa.output,
        ref = get_clean_ref_idx
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.full.delta'
    params:
        prefix = 'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.full'
    threads:
        4
    conda:
        config['softparams']['conda']['mummer']
    shell:
        'nucmer --maxmatch -t {threads} -p {params.prefix} {input.ref} {input.query}'

rule mummer_dnadiff_best_complete:
    input:
        rules.mummer_nucmer_best.output
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.full.report'
    params:
        prefix = 'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.full'
    conda:
        config['softparams']['conda']['mummer']
    shell:
        'dnadiff -p {params.prefix} -d {input}'

rule mummer_dnadiff_best_empty:
    output:
        touch('stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.empty.report')

def get_report(wildcards):
    # This part might take a lot of time
    # The best is to run it with --until hs_make_best_subfa
    output = checkpoints.make_best_subfa.get(** wildcards).output[0]
    if os.stat(output).st_size == 0:
        return rules.mummer_dnadiff_best_empty.output
    else:
        return rules.mummer_dnadiff_best_complete.output

rule mummer_dnadiff_best:
    input:
        get_report
    output:
        'stats/assemblies/{group}/{basename}/mummer/{idx}.{sim}.{length}.best.report'
    shell:
        'ln -s $(pwd)/{input} {output}'

def get_reports(wildcards):
    count = len(SAMPLES[wildcards.group])
    group = [wildcards.group for _ in range(count)]
    basename = [wildcards.basename for _ in range(count)]
    idx = list(range(count))

    return expand( 
        f'stats/assemblies/{{group}}/{{basename}}/mummer/{{idx}}.{wildcards.sim}.{wildcards.length}.best.report',
        zip, group=group, basename=basename, idx=idx
        )

rule parse_report:
    input:
        get_reports
    output:
        'stats/assemblies/{group}/{basename}/mummer/report.{sim}.{length}.tsv'
    params:
        get_clean_refs
    script:
        'scripts/assemblies_stats_parse_reports.py'

rule compress_mummer:
    input:
        rules.parse_report.output
    output:
        'stats/assemblies/{group}/{basename}/mummer/mummer_files.{sim}.{length}.tar.gz'
    params:
        path = 'stats/assemblies/{group}/{basename}/mummer/[0-9]*.{sim}.{length}.*'
    shell:
        'tar -czf {output} {params.path} --remove-files'

rule prepare_circos_coords:
    input:
        get_reports
    output:
        'stats/assemblies/{group}/{basename}/mummer/circos/1coords.{sim}.{length}.tsv'
    params:
        'stats/assemblies/{group}/{basename}/mummer/*.{sim}.{length}.best.full.1coords'
    shell:
        'awk \'BEGIN{{OFS="\\t"}} $2!="." && $3!="."{{ print $12,$1,$2,$7 }}\' {params} > {output}'

rule prepare_circos_snps:
    input:
        get_reports
    output:
        'stats/assemblies/{group}/{basename}/mummer/circos/snps.int.{sim}.{length}.tsv'
    params:
        'stats/assemblies/{group}/{basename}/mummer/*.{sim}.{length}.best.full.snps'
    shell:
        'for f in {params}; \
        do \
        cat "${{f}}" | sort -k11,11 -k1,1n | \
        awk \'BEGIN{{beg=1}} $2!="." && $3!="."{{ step=int($7/1500)+1;end=beg+step;while($1>end){{beg=end+1;end=beg+step}} snps[beg]+=1;x[beg]=end}} END{{ for(beg in snps){{printf("%s\\t%d\\t%d\\t%d\\n",$11,beg,x[beg],snps[beg])}} }} \'; \
        done | sort -k1,1 -k2,2n > {output}'

rule prepare_circos_karyotype:
    input:
        get_clean_refs
    output:
        'stats/assemblies/{group}/{basename}/mummer/circos/karyotype.{sim}.{length}.txt'
    params:
        get_clean_refs_dict
    script:
        'scripts/assemblies_stats_circos_karyotype.py'

rule make_all_files:
    input:
        ancient(rules.parse_report.output),
        ancient(rules.prepare_circos_coords.output),
        ancient(rules.prepare_circos_snps.output),
        ancient(rules.prepare_circos_karyotype.output),
        ancient(rules.compress_mummer.output)
    output:
        touch('stats/assemblies/{group}/{basename}/mummer/circos/done.{sim}.{length}.empty')