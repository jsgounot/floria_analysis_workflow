from scripts import utilities

wildcard_constraints:
    assembly="operams|flye_nanopore_raw|flye_nanopore_medaka|canu_nanopore|megahit"


rule uncompress_long:
    input:
        'reads/{group}/nanopore/merged.fastq.gz'
    output:
        temp('reads/{group}/nanopore/merged.fastq')
    shell:
        'gunzip -c {input} > {output}'

rule operams:
    input:
        sr1 = 'reads/{group}/illumina/merged/R1.fastq.gz',
        sr2 = 'reads/{group}/illumina/merged/R2.fastq.gz',
        lr = 'reads/{group}/nanopore/merged.fastq',
        exe = config['softparams']['soft']['operams']
    output:
        outdir = directory('assembly/operams/{group}'),
        interm = directory('assembly/operams/{group}/intermediate_files'),
        fasta = protected('assembly/operams/{group}/contigs.polished.fasta')
    conda:
        config['softparams']['conda']['operams']
    log:
        'logs/{group}/assembly.operams.log'
    benchmark:
        'benchmarks/{group}/operams.txt'
    threads:
        utilities.get_generic_threads
    shell:
        '(perl {input.exe} --short-read1 {input.sr1} --short-read2 {input.sr2} --long-read {input.lr} --out-dir {output.outdir} --polishing --num-processors {threads})  2> {log}'

rule compress_intermediate:
    input:
        'assembly/operams/{group}/intermediate_files'
    output:
        'assembly/operams/{group}/intermediate_files.tar.gz'
    shell:
        'tar -czf {output} {input} && rm -r {input}'

rule link_operams:
    input:
        fa = rules.operams.output.fasta,
        ci = rules.compress_intermediate.output
    output:
        'assembly/done/{group}/operams.fa'
    shell:
        'ln -s $(pwd)/{input.fa} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Maybe I should change this to something into the configuration file
# But it seems this only helps for an estimation of used memory and not
# directly impact assembly output
ESTIMATED_GENOMESIZE = '5m'

rule flye_nanopore:
    input:
        'reads/{group}/nanopore/merged.fastq.gz'
    output: 
        outdir = directory('assembly/flye/{group}/nanopore'),
        fasta = protected('assembly/flye/{group}/nanopore/assembly.fasta')
    conda:   
        config['softparams']['conda']['flye']
    log:    
        'logs/{group}/assembly.flye_nanopore.log'
    benchmark:
        'benchmarks/{group}/flye_nanopore.txt'
    threads:
        utilities.get_generic_threads
    params:
        mgsize = ESTIMATED_GENOMESIZE
    shell:
        'flye --meta --keep-haplotypes --min-overlap 1000 --iterations 4 --genome-size {params.mgsize} --out-dir {output.outdir} --threads {threads} --nano-raw {input} &> {log}'

rule link_flye_nanopore:
    input:
        rules.flye_nanopore.output.fasta
    output:
        'assembly/done/{group}/flye_nanopore_raw.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule flye_nanopore_medaka:
    input:
        rules.flye_nanopore.output.fasta
    output:
        'assembly/flye/{group}/medaka/assembly.fasta'
    benchmark:
        'benchmarks/{group}/flye_medaka.txt'
    shell:
        'tobedone'

rule link_flye_nanopore_medaka:
    input:
        rules.flye_nanopore_medaka.output
    output:
        'assembly/done/{group}/flye_nanopore_medaka.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule canu_nanopore:
    input:
        'reads/{group}/nanopore/merged.fastq.gz'
    output: 
        outdir = directory('assembly/canu/{group}/nanopore'),
        fasta = protected('assembly/canu/{group}/nanopore/assembly.contigs.fasta')
    conda:   
        config['softparams']['conda']['canu']
    log:    
        'logs/{group}/assembly.canu_nanopore.log'
    benchmark:
        'benchmarks/{group}/canu_nanopore.txt'
    threads:
        utilities.get_generic_threads
    params:
        mgsize = lambda wc: config[wc.group]['assembly']['canu_mg_size']
    shell:
        'canu -p assembly -d {output.directory} genomeSize={params.mgsize} maxThreads={threads} useGrid=false -nanopore {input.reads} 2> {log}'

rule link_canu_nanopore:
    input:
        rules.canu_nanopore.output.fasta
    output:
        'assembly/done/{group}/canu_nanopore.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule canu_pacbio:
    input:
        'reads/{group}/pacbio/merged_{rtype}.fastq.gz'
    output: 
        outdir = directory('assembly/canu/{group}/pacbio/{rtype}'),
        fasta = protected('assembly/canu/{group}/pacbio/{rtype}/assembly.contigs.fasta')
    conda:   
        config['softparams']['conda']['canu']
    log:    
        'logs/{group}/assembly.canu_pacbio.{rtype}.log'
    benchmark:
        'benchmarks/{group}/canu_pacbio.{rtype}.txt'
    threads:
        utilities.get_generic_threads
    params:
        mgsize = lambda wc: config[wc.group]['assembly']['canu_mg_size']
    shell:
        'canu -p assembly -d {output.directory} genomeSize={params.mgsize} maxThreads={threads} useGrid=false -pacbio {input.reads} 2> {log}'

rule link_canu_pacbio:
    input:
        rules.canu_pacbio.output.fasta
    output:
        'assembly/done/{group}/canu_pacbio_{rtype}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule megahit_paired:
    input:
        r1 = 'reads/{group}/illumina/merged/R1.fastq.gz',
        r2 = 'reads/{group}/illumina/merged/R2.fastq.gz'
    output:
        outdir = directory('assembly/megahit/{group}/'),
        fasta = protected('assembly/megahit/{group}/final.contigs.fa')   
    params:
        # In this version I remove intermediate files which took a lot of space
        interm = 'assembly/megahit/{group}/intermediate_contigs'
    conda:
        config['softparams']['conda']['megahit']
    threads:
        utilities.get_generic_threads
    log:
        'logs/{group}/assembly.megahit_paired.log'
    benchmark:
        'benchmarks/{group}/megahit_paired.txt'
    shell:
        'rm -r {output.outdir} && megahit -1 {input.r1} -2 {input.r2} -o {output.outdir} -t {threads} && rm -rf {params.interm} 2> {log}'

rule link_megahit:
    input:
        rules.megahit_paired.output.fasta
    output:
        'assembly/done/{group}/megahit.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# https://hifiasm.readthedocs.io/en/latest/interpreting-output.html#output-files
rule hifiasm_meta:
    input:
        fastq = 'reads/{group}/pacbio/merged_{model}.fastq.gz',
        exe = config['softparams']['soft']['hifiasm_meta']
    output:
        raw_unitigs       = protected('assembly/hifiasm_meta/{group}/{model}/asm.r_utg.gfa'),
        clean_unitigs     = protected('assembly/hifiasm_meta/{group}/{model}/asm.p_utg.gfa'),
        primary_contigs   = protected('assembly/hifiasm_meta/{group}/{model}/asm.p_ctg.gfa'),
        alternate_contigs = protected('assembly/hifiasm_meta/{group}/{model}/asm.a_ctg.gfa'),
    params:
        prefix = 'assembly/hifiasm_meta/{group}/{model}/asm'
    benchmark:
        'benchmarks/{group}.hifiasm_meta.{model}.txt'
    threads: 
        utilities.get_generic_threads
    log:
        'logs/{group}/hifiasm_meta.{model}.log'
    shell:
        '{input.exe} -o {params.prefix} -t {threads} {input.fastq} 2> {log}'

# https://www.biostars.org/p/169516/
rule hifiasm_meta_gfa_to_fa:
    input:
        'assembly/hifiasm_meta/{group}/{model}/asm.{assembly}.gfa'
    output:
        'assembly/hifiasm_meta/{group}/{model}/asm.{assembly}.fa'
    shell:
        'awk \'/^S/{{print ">"$2"\\n"$3}}\' {input} | fold > {output}'

rule hifiasm_meta_add_suffix:
    input:
        'assembly/hifiasm_meta/{group}/{model}/asm.{assembly}.fa'
    output:
	'assembly/hifiasm_meta/{group}/{model}/asm.{assembly}_suffix.fa'
    params:
        suffix = lambda wc: wc.basename
    script:
        'scripts/rename_fastaids.py'	

rule hifiasm_meta_merge_ctg:
    input:
        pctg = 'assembly/hifiasm_meta/{group}/{model}/asm.p_ctg.fa',
        actg = 'assembly/hifiasm_meta/{group}/{model}/asm.a_ctg.fa'
    output:
        'assembly/hifiasm_meta/{group}/{model}/asm.m_ctg.fa'
    shell:
        "(sed 's/>.*/&_p_ctg/' {input.pctg} > {output}) && (sed 's/>.*/&_a_ctg/' {input.actg} >> {output})"

rule link_hifiasm_meta:
    input:
        'assembly/hifiasm_meta/{group}/{model}/asm.{assembly}.fa'
    output:
        'assembly/done/{group}/hifiasm_meta.{model}.{assembly}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule unicycler_short:
    input:
        r1 = 'reads/{group}/illumina/merged/R1.fastq.gz',
        r2 = 'reads/{group}/illumina/merged/R2.fastq.gz'
    output:
        fa = 'assembly/unicycler/{group}/short/assembly.fasta'
    conda:
        config['softparams']['conda']['unicycler']
    params:
        prefix = 'assembly/unicycler/{group}/short'
    threads:
        utilities.get_generic_threads
    log:
        'logs/{group}/assembly.unicycler_short.log'
    benchmark:
        'benchmarks/{group}/unicycler_short.txt'
    shell:
        'unicycler --short1 {input.r1} --short2 {input.r2} --threads {threads} --out {params.prefix} > {log}'

rule unicycler_long:
    input:
        lo = 'reads/{group}/nanopore/merged.fastq.gz'
    output:
        fa = 'assembly/unicycler/{group}/long/assembly.fasta'
    conda:
        config['softparams']['conda']['unicycler']
    params:
        prefix = 'assembly/unicycler/{group}/long'
    threads:
        utilities.get_generic_threads
    log:
        'logs/{group}/assembly.unicycler_long.log'
    benchmark:
        'benchmarks/{group}/unicycler_long.txt'
    shell:
        'unicycler --long {input.lo} --threads {threads} --out {params.prefix} > {log}'

rule unicycler_hybrid:
    input:
        r1 = 'reads/{group}/illumina/merged/R1.fastq.gz',
        r2 = 'reads/{group}/illumina/merged/R2.fastq.gz',
        lo = 'reads/{group}/nanopore/merged.fastq.gz'
    output:
        fa = 'assembly/unicycler/{group}/hybrid/assembly.fasta'
    conda:
        config['softparams']['conda']['unicycler']
    params:
        prefix = 'assembly/unicycler/{group}/hybrid'
    threads:
        utilities.get_generic_threads
    log:
        'logs/{group}/assembly.unicycler_hybrid.log'
    benchmark:
        'benchmarks/{group}/unicycler_hybrid.txt'
    shell:
        'unicycler --short1 {input.r1} --short2 {input.r2} --long {input.lo} --threads {threads} --out {params.prefix} > {log}'

rule link_unicycler:
    input:
        'assembly/unicycler/{group}/{mode}/assembly.fasta'
    output:
        'assembly/done/{group}/unicycler_{mode}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule link_to_mapping_process:
    input:
        'assembly/done/{group}/{assembly}.fa'
    output:
        'references/used/{group}/refmap/{assembly}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# If issue, make sure the assembly is in the allowed wildcards

rule link_to_haplotype_stats:
    input:
        'assembly/done/{group}/{assembly}.fa'
    output:
        temp('temp/assemblies/{group}/{assembly}.fa')
    shell:
        'ln -s $(pwd)/{input} {output}'
