# Thread note here: We provide here one single thread to strainberry while actually asking 16 of them in the command line `-c 16`
# The reason is that most of the strainberry process is based on longshot, which in case of good reference assembly will not be well multhithreaded
# Which can result in important time without CPU usage. Here we take the risk to use more CPU at one point (by using 16 more CPU) but this should still be ok.
# IMPORTANT NOTE: In case the software is used on a cluster, this should however be modified!

STRAINBERRY = '/home/ubuntu/miniconda3/envs/strainberry/bin/strainberry'

rule strainberry_illumina:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.illumina.bam',
        bai   = 'mapping/{group}/{refori}.illumina.bam.bai'
    output:
        directory = directory('phasing/strainberry/{group}/{refori}/illumina'),
        scaffold  = protected('phasing/strainberry/{group}/{refori}/illumina/assembly.scaffolds.fa')
    params:
        executable = STRAINBERRY
    conda:
        config['softparams']['conda']['strainberry']
    benchmark:
        'benchmarks/{group}/strainberry.{refori}.illumina.txt'
    threads:
        1
    log:
        'logs/{group}/strainberry.{refori}.illumina.log'
    shell:
        '{params.executable} -r {input.fasta} -b {input.bam} -o {output.directory} -c 16 2> {log}'

rule strainberry_nanopore:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.nanopore.bam',  
        bai   = 'mapping/{group}/{refori}.nanopore.bam.bai'
    output:
        directory = directory('phasing/strainberry/{group}/{refori}/nanopore'),
        scaffold  = protected('phasing/strainberry/{group}/{refori}/nanopore/assembly.scaffolds.fa')
    params:
        executable = STRAINBERRY
    conda:
        config['softparams']['conda']['strainberry']
    benchmark:
        'benchmarks/{group}/strainberry.{refori}.nanopore.txt'
    threads:
        1
    log:
        'logs/{group}/strainberry.{refori}.nanopore.log'
    shell:
        '{params.executable} -r {input.fasta} -b {input.bam} -o {output.directory} -c 16 --nanopore 2> {log}'

rule strainberry_compress:
    input:
        'phasing/strainberry/{group}/{refori}/{type}/assembly.scaffolds.fa'
    output:
        'phasing/assemblies/{group}/{refori}.strainberry.{type}.fa.gz'
    shell:
        'gzip -c {input} > {output}'

rule uncompress:
    input:
        rules.strainberry_compress.output
    output: 
        temp('temp/assemblies/{group}/{refori}.strainberry.{type}.fa')
    shell:
        'zcat {input} > {output}'