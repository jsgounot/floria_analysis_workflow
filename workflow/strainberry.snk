STRAINBERRY = '/home/ubuntu/miniconda3/envs/strainberry/bin/strainberry'

rule strainberry_illumina:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.illumina.bam',
        bai   = 'mapping/{group}/{refori}.illumina.bam.bai'
    output:
        directory = directory('phasing/strainberry/{group}/{refori}/illumina'),
        scaffold  = 'phasing/strainberry/{group}/{refori}/illumina/assembly.scaffolds.fa'
    params:
        executable = STRAINBERRY
    conda:
        'envs/strainberry.yaml'
    benchmark:
        'benchmarks/{group}/strainberry.{refori}.illumina.txt'
    threads:
        1
    log:
        'logs/{group}/strainberry.{refori}.illumina.log'
    shell:
        '{params.executable} -r {input.fasta} -b {input.bam} -o {output.directory} -c 16 2> {log}'

rule strainberry_nanopore:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.nanopore.bam',  
        bai   = 'mapping/{group}/{refori}.nanopore.bam.bai'
    output:
        directory = directory('phasing/strainberry/{group}/{refori}/nanopore'),
        scaffold  = 'phasing/strainberry/{group}/{refori}/nanopore/assembly.scaffolds.fa'
    params:
        executable = STRAINBERRY
    conda:
        'envs/strainberry.yaml'
    benchmark:
        'benchmarks/{group}/strainberry.{refori}.nanopore.txt'
    threads:
        1
    log:
        'logs/{group}/strainberry.{refori}.nanopore.log'
    shell:
        '{params.executable} -r {input.fasta} -b {input.bam} -o {output.directory} -c 16 --nanopore 2> {log}'

rule strainberry_compress:
    input:
        'phasing/strainberry/{group}/{refori}/{type}/assembly.scaffolds.fa'
    output:
        'phasing/assemblies/{group}/{refori}.strainberry.{type}.fa.gz'
    shell:
        'gzip -c {input} > {output}'

rule uncompress:
    input:
        rules.strainberry_compress.output
    output: 
        temp('temp/assemblies/{group}/{refori}.strainberry.{type}.fa')
    shell:
        'zcat {input} > {output}'