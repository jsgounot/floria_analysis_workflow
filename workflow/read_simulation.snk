import os

class MissingInputException(Exception):
    pass

def get_sample_info(config, wc, keyword, default=None):
    value = config['samples'][wc.group][wc.sample].get(keyword, default)
    if value is None:
        raise MissingInputException(f'Missing subsampling keyword "{keyword}" in your configuration file for group "{wc.group}" and sample "{wc.sample}".')
    return str(value)

rule badread_make_ref:
    input:
        'references/used/{group}/sample/{sample}.fasta'
    output:
        temp('reads/{group}/nanopore/{sample}.ref.fa.gz')
    params:
        circular = lambda wc: get_sample_info(config, wc, 'circular', 'true')
    shell:
        'awk \'{{ if ( $0 ~ /^>/ ) {{ print $0" circular={params.circular}" }} else {{ print $0 }} }}\' {input} | gzip > {output}'

rule nanopore_badread_good:
    input:
        rules.badread_make_ref.output
    output:
        temp('reads/{group}/nanopore/{sample}.good.fastq.gz')
    params:
        quantity = lambda wc: get_sample_info(config, wc, 'quantity') + 'x',
        error_model = 'random',
        identity = '95,100,2',
        glitches = '0,0,0',
        junk_reads = 0,
        random_reads = 0,
        chimeras = 0,
        start_adapter_seq = '""',
        end_adapter_seq = '""',
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    conda:
        config['softparams']['conda']['badread']
    log:
        'logs/{group}/badread.{sample}.good.log'
    shell:
        '(badread simulate --reference {input} --quantity {params.quantity} --error_model {params.error_model} --identity {params.identity} \
            --glitches {params.glitches} --junk_reads {params.junk_reads} --random_reads {params.random_reads} \
            --chimeras {params.chimeras} --start_adapter_seq {params.start_adapter_seq} --end_adapter_seq {params.end_adapter_seq} \
            --seed {params.seed} | gzip > {output}) 2> {log}'

rule nanopore_badread_bad:
    input:
        rules.badread_make_ref.output
    output:
        temp('reads/{group}/nanopore/{sample}.bad.fastq.gz')
    params:
        quantity = lambda wc: get_sample_info(config, wc, 'quantity') + 'x',
        error_model = 'random',
        identity = '75,90,8',
        glitches = '1000,100,100',
        junk_reads = 5,
        random_reads = 5,
        chimeras = 10,
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    conda:
        config['softparams']['conda']['badread']
    log:
        'logs/{group}/badread.{sample}.good.log'
    shell:
        '(badread simulate --reference {input} --quantity {params.quantity} --error_model {params.error_model} --identity {params.identity} \
            --glitches {params.glitches} --junk_reads {params.junk_reads} --random_reads {params.random_reads} --chimeras {params.chimeras} \
            --seed {params.seed} | gzip > {output}) 2> {log}'

rule nanopore_badread_average:
    input:
        rules.badread_make_ref.output
    output:
        temp('reads/{group}/nanopore/{sample}.average.fastq.gz')
    params:
        quantity = lambda wc: get_sample_info(config, wc, 'quantity') + 'x',
        qscore_model = 'nanopore2020',
        error_model = 'nanopore2020',
        identity = '87.5,97.5,5',
        glitches = '1000,25,25',
        junk_reads = 1,
        random_reads = 1,
        chimeras = 1,
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    conda:
        config['softparams']['conda']['badread']
    log:
        'logs/{group}/badread.{sample}.average.log'
    shell:
        '(badread simulate --reference {input} --quantity {params.quantity} --error_model {params.error_model} --qscore_model {params.qscore_model} \
        --identity {params.identity} --glitches {params.glitches} --junk_reads {params.junk_reads} --random_reads {params.random_reads} \
         --chimeras {params.chimeras} --seed {params.seed} | gzip > {output}) 2> {log}'

def make_pid(wc):
    mean = float(wc.pid)
    maxv = mean + 10 
    maxv = maxv if maxv < 100 else 100
    std  = 5
    return f'{mean:.1f},{maxv:.1f},{std}'

rule nanopore_badread_average_pid:
    input:
        rules.badread_make_ref.output
    output:
        'reads/{group}/nanopore/{sample}.average_pid{pid}.fastq.gz'
    params:
        quantity = lambda wc: get_sample_info(config, wc, 'quantity') + 'x',
        qscore_model = 'nanopore2020',
        error_model = 'nanopore2020',
        identity = make_pid,
        glitches = '1000,25,25',
        junk_reads = 1,
        random_reads = 1,
        chimeras = 1,
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    wildcard_constraints:
        pid="\d+"
    conda:
        config['softparams']['conda']['badread']
    log:
        'logs/{group}/badread.{sample}.average_pid{pid}.log'
    shell:
        '(badread simulate --reference {input} --quantity {params.quantity} --error_model {params.error_model} --qscore_model {params.qscore_model} \
        --identity {params.identity} --glitches {params.glitches} --junk_reads {params.junk_reads} --random_reads {params.random_reads} \
         --chimeras {params.chimeras} --seed {params.seed} | gzip > {output}) 2> {log}'

rule nanopore_badread_readsid_correction:
    input:
        'reads/{group}/nanopore/{sample}.{quality}.fastq.gz'
    output:
        'reads/{group}/nanopore/{sample}.{quality}.rids_corrected.fastq.gz'
    params:
        sample = lambda wc: wc.sample
    script:
        'scripts/rs_rename_fastqids.py'

def get_nanopore(wc):
    quality = get_sample_info(config, wc, 'nanopore_qual')
    return os.path.join('reads', wc['group'], 'nanopore',
        wc['sample'] + '.' + quality + '.rids_corrected.fastq.gz')

rule link_nanopore:
    input:
        get_nanopore
    output:
        'reads/{group}/nanopore/{sample}.used.fastq.gz' 
    shell:
        'ln -s $(pwd)/{input} {output}'

def get_nanopore_reads(wc):
    group = wc.group
    samples = [sample for sample in config['samples'][group] if sample != 'internal']
    return expand(
        'reads/{group}/nanopore/{sample}.used.fastq.gz',
        group=group, sample=samples
        )

rule merge_nanopore:
    input:
        get_nanopore_reads
    output:
        temp('reads/{group}/nanopore/merged.fastq.gz')
    shell:
        'cat {input} > {output}'

# --------------------------------------------------------------------------------------------------------------------------------------------

rule illumina_art_run:
    input:
        'references/used/{group}/sample/{sample}.fasta'
    output:
        r1 = 'reads/{group}/illumina/{sample}_R1.fq',
        r2 = 'reads/{group}/illumina/{sample}_R2.fq'
    params:
        instrument = 'HS25',
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1'),
        length = 150,
        meansize = 300,
        std = 10,
        coverage = lambda wc: get_sample_info(config, wc, 'quantity'),
        outname = 'reads/{group}/illumina/{sample}_R'
    conda:
        config['softparams']['conda']['art']
    log:
        'logs/{group}/art_illumina.{sample}.log'
    shell:
        'art_illumina -ss {params.instrument} -i {input} -p -l {params.length} -f {params.coverage} -m {params.meansize} -s {params.std} -o {params.outname} -d {wildcards.sample} -na -rs {params.seed} > {log}'

rule compress_read:
    input:
        'reads/{group}/illumina/{sample}_{ridx}.fq'
    output:
        temp('reads/{group}/illumina/{sample}_{ridx}.fq.gz')
    shell:
        'gzip {input}'

rule illumina_readsid_correction:
    input:
        rules.compress_read.output
    output:
        'reads/{group}/illumina/{sample}_{ridx}.rids_corrected.fq.gz'
    params:
        sample = lambda wc: wc.sample
    script:
        'scripts/rs_rename_fastqids.py'

def get_illumina_reads(wildcards):
    group = wildcards.group
    samples = [sample for sample in config['samples'][group]]
    return expand(
        'reads/{group}/illumina/{sample}_{ridx}.rids_corrected.fq.gz',
        group=group, sample=samples, ridx=wildcards.ridx
        )

rule merge_illumina:
    input:
        get_illumina_reads
    output:
        temp('reads/{group}/illumina/merged/{ridx}.fastq.gz')
    shell:
        'cat {input} > {output}'


# --------------------------------------------------------------------------------------------------------------------------------------------
# NOTE REGARDING PBSIM AND PBSIM2
# For an unexplained reason, pbsim output is not really high quality even with a CCS model
# this lead to exponential number of haplotypes when running phasing, which is a bit weird
# I also implemented pbsim2 but this version does not offer HiFi reads (P6C4 are regular pacbio reads)
# I therefore switch to a custom bbmap algorithm as proposed in some paper and github rep

rule pacbio_pbsim_download_model:
    output:
        'external_data/pbsim/{model_name}'
    params:
        url = 'https://raw.githubusercontent.com/pfaucon/PBSIM-PacBio-Simulator/master/data/{model_name}'
    shell:
        'wget {params.url} -O {output}'

rule pacbio_pbsim2_download_model:
    output:
        'external_data/pbsim2/{model_name}'
    params:
        url = 'https://raw.githubusercontent.com/yukiteruono/pbsim2/master/data/{model_name}'
    shell:
        'wget {params.url} -O {output}'

rule pacbio_pbsim_prepare:
    input:
        'references/used/{group}/sample/{sample}.fasta'
    output:
        fasta = 'reads/{group}/pacbio/{sample}.fasta'
    run:
        shell('echo ">{wildcards.sample}" > {output.fasta}')
        shell('grep -v "^>" {input} >> {output.fasta}')

rule pacbio_pbsim_ccs:
    input:
        reference = 'reads/{group}/pacbio/{sample}.fasta',
        model = 'external_data/pbsim/model_qc_ccs'
    output:
        fastq = 'reads/{group}/pacbio/{sample}_ccs_0001.fastq'
    params:
        cover = lambda wc: str(config[wc.group][wc.sample]['quantity']),
        prefix = 'reads/{group}/pacbio/{sample}_ccs',
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    conda:
        config['softparams']['conda']['pbsim']
    shell:
        'pbsim --data-type CCS --seed {params.seed} --depth {params.cover} --model_qc {input.model} --prefix {params.prefix} {input.reference}'

rule pacbio_pbsim2:
    input:
        reference = 'reads/{group}/pacbio/{sample}.fasta',
        model = 'external_data/pbsim2/P6C4.model'
    output:
        fastq = 'reads/{group}/pacbio/{sample}_p6c4_0001.fastq'
    conda:
        config['softparams']['conda']['pbsim2']
    params:
        depth = lambda wc: get_sample_info(config, wc, 'quantity'),
        prefix = 'reads/{group}/pacbio/{sample}_p6c4',
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1')
    shell:
        'pbsim --seed {params.seed} --depth {params.depth} --hmm_model {input.model} --prefix {params.prefix} {input.reference}'

# https://github.com/chhylp123/hifiasm/issues/33
# I keep the output format similar to pbsim for compatibility issue
rule pacbio_bbmap:
    input:
        reference = 'reads/{group}/pacbio/{sample}.fasta'
    output:
        fastq = 'reads/{group}/pacbio/{sample}_bbmap_0001.fastq'
    params:
        depth = lambda wc: get_sample_info(config, wc, 'quantity'),
        minlength = 9000,
        midlength = 10000,
        maxlength = 12000,
        seed = lambda wc: get_sample_info(config, wc, 'seed', '1'),
        pbmin = 0.001,
        pbmax = 0.01,
        add = 'build=1 ow=t illuminanames=t addslash=t pacbio=t paired=f gaussianlength=t'
    log:
        'logs/{group}/bbmap.randomreads.hifi.{sample}.log'
    conda:
        config['softparams']['conda']['bbmap']
    shell:
        'randomreads.sh seed={params.seed} ref={input} pbmin={params.pbmin} pbmax={params.pbmax} \
        coverage={params.depth} minlength={params.minlength} midlength={params.midlength} \
        maxlength={params.maxlength} out={output} {params.add}  2> {log}'

rule pacbio_comp:
    input:
        'reads/{group}/pacbio/{sample}_{pacbio_model}_0001.fastq'
    output:
        'reads/{group}/pacbio/{sample}_{pacbio_model}_0001.fastq.gz'
    threads:
        4
    shell:
        'pigz -9 -p {threads} {input}'

rule pacbio_readsid_correction:
    input:
        rules.pacbio_comp.output
    output:
        'reads/{group}/pacbio/{sample}_{pacbio_model}_0001.rids_corrected.fastq.gz'
    params:
        sample = lambda wc: wc.sample
    script:
        'scripts/rs_rename_fastqids.py'

def get_pacbio_reads(wildcards):
    group = wildcards.group
    samples = [sample for sample in config['samples'][group] if sample != 'internal']
    return expand(
        'reads/{group}/pacbio/{sample}_{{pacbio_model}}_0001.rids_corrected.fastq.gz',
        group=group, sample=samples
        )

rule merge_pacbio:
    input:
        get_pacbio_reads
    output:
        temp('reads/{group}/pacbio/merged_{pacbio_model}.fastq.gz')
    shell:
        'cat {input} > {output}'
