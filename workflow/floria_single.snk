import glob, os, json
from scripts import utilities

# This constraint the wildcards for ALL modules
wildcard_constraints:
    vcaller="longshot|lofreq|binocustom|freebayes|freebayes_ploidy_auto",
    rtype="long_reads|short_reads"

# ------------------------------------------------------------------------------------------------------------------------------------------
# Glopp

FMODES = {
    'fp0': '-l 100 -d 0.0001',
    'fp1': '-l 100 -d 0.0005 -e 0.01',
    'fp2': '-l 15000 -e 0.04 -d 0.001 -n 10'
}

def get_extra_params(preset, config):
    user_presets = config.get('miscs', {})
    user_presets = {key.lower(): value for key, value in user_presets.items()}
    presets = {** FMODES, ** user_presets.get('floria_presets', {})}
    if preset not in presets: raise Exception(f'Unable to find preset "{preset}" in the default or configuration file')
    return presets[preset]

rule floria:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.{gmode}.bam',
        bai   = 'mapping/{group}/{refori}.{gmode}.bam.bai',
        vcf   = 'vcalling/{group}/single/{refori}.{gmode}.{vcaller}.floria_vcf_header'
    output:
        directory('phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir/{fpreset}')
    params:
        exe = utilities.get_softpath(config, 'floria'),
        extra_params = lambda wc: get_extra_params(wc.fpreset, config) if wc.fpreset != 'none' else ''
    conda:
        config['softparams']['conda']['floria']
    threads:
        config['miscs']['GENERIC_THREADS']
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.txt'
    shell:
        '{params.exe} -b {input.bam} -v {input.vcf} -o {output} -t {threads} -r {input.fasta} \
            --output-reads --gzip-reads {params.extra_params} > {log}'

rule floria_hybrid:
    input:
        fasta = 'references/used/{group}/refmap/{refori}.fa',
        fai   = 'references/used/{group}/refmap/{refori}.fa.fai',
        bam   = 'mapping/{group}/{refori}.nanopore.bam',
        bai   = 'mapping/{group}/{refori}.nanopore.bam.bai',
        short = 'mapping/{group}/{refori}.illumina.bam',
        vcf   = 'vcalling/{group}/single/{refori}.illumina.{vcaller}.floria_vcf_header'
    output:
        directory('phasing/floria/single/{group}/{refori}/{vcaller}/hybrid/wdir/{fpreset}')
    params:
        exe = utilities.get_softpath(config, 'floria'),
        extra_params = lambda wc: get_extra_params(wc.fpreset, config) if wc.fpreset != 'none' else ''
    conda:
        config['softparams']['conda']['floria']
    threads:
        config['miscs']['GENERIC_THREADS']
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.hybrid.{fpreset}.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.hybrid.{fpreset}.txt'
    shell:
        '{params.exe} -b {input.bam} -v {input.vcf} -o {output.outdir} -t {threads} -r {input.fasta} -H {input.short} \
            --reassign-short --output-reads --gzip-reads {params.extra_params} > {log}'

# ------------------------------------------------------------------------------------------------------------------------------------------
# Post-processing
# This part is made to compress all directory for both space and files number reduction

rule mv_compress:
    # We need to mv first to avoid snakemake to get confused with timestamps
    input:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir/{fpreset}'
    output:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir.{fpreset}.tar.gz'
    params:
        dname = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/done/{fpreset}'
    priority:
        1
    shell:
        'mkdir -p {params.dname} && mv {input} {params.dname} && tar czf {output} {params.dname} --remove-files'

rule uncompress:
    input:
        rules.mv_compress.output[0]
    output:
        temp(touch('phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/floria.{fpreset}.{rtype}.{assembler}.uncompressed'))
    shell:
        'tar xzf {input} --transform "s/fastq.gz/{wildcards.assembler}.fastq.gz/" --wildcards "*/{wildcards.rtype}/*.fastq.gz"'

# ------------------------------------------------------------------------------------------------------------------------------------------
# Assembly

# I end up using a script for each assembly process here to make all the assemblies with one single rule
# as fast, not overloading output, still work asynchroniously. Best decision I took during the last months

# Note regarding unicyler
# I decided to not use it because unicycler uses Spades under the hood
# which is perfectly fine with regular good coverage genomes
# but crashes when coverage is low which happens quite a lot when
# dealing with this kind of cases (or short-binning as well for example)
# I'm using abysspe instead but maybe something better could be use

WTDBG2PRESETS = {
    'hifi': '-x ccs -R',
    'nano': '-x preset2 -e 5 -l 1000 -L 3000 -S 1 -R'
}

rule wtdbg2:
    input:
        reads_ar = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir.{fpreset}.tar.gz',
        flag = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/floria.{fpreset}.{rtype}.wtdbg2.uncompressed'
    output:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/assembly.{fpreset}.wtdbg2.{rtype}.{preset}.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    params:
        preset = lambda wc: WTDBG2PRESETS[wc.preset]
    conda:
        config['softparams']['conda']['wtdbg2']
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.{preset}.wtdbg2.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.wtdbg2.{preset}.txt'
    script:
        'scripts/floria_run_wtdbg2.py'

rule flye:
    input:
        reads_ar = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir.{fpreset}.tar.gz',
        flag = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/floria.{fpreset}.{rtype}.flye.uncompressed'
    output:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/assembly.{fpreset}.flye.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    conda:
        config['softparams']['conda']['flye']
    params:
        kmersize = 16
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.none.flye.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.flye.none.txt'
    script:
        'scripts/floria_run_flye.py'

rule abysspe:
    input:
        reads_ar = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir.{fpreset}.tar.gz',
        flag = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/floria.{fpreset}.{rtype}.abysspe.uncompressed'
    output:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/assembly.{fpreset}.abysspe.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    conda:
        config['softparams']['conda']['abyss']
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.abysspe.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.abysspe.txt'
    script:
        'scripts/floria_run_abysspe.py'

rule megahit:
    input:
        reads_ar = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/wdir.{fpreset}.tar.gz',
        flag = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/floria.{fpreset}.{rtype}.megahit.uncompressed'
    output:
        'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/assembly.{fpreset}.megahit.{rtype}.none.fa.gz'
    threads:
        config['miscs']['GENERIC_THREADS']
    conda:
        config['softparams']['conda']['megahit']
    log:
        'logs/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.megahit.log'
    benchmark:
        'benchmarks/{group}/floria.single.{refori}.{vcaller}.{gmode}.{fpreset}.{rtype}.megahit.txt'
    script:
        'scripts/floria_run_megahit.py'

rule get_assembly:
    input:
        fasta = 'phasing/floria/single/{group}/{refori}/{vcaller}/{gmode}/assembly.{fpreset}.{assembler}.{rtype}.{preset}.fa.gz',
    output:
        temp('temp/assemblies/{group}/{refori}.{vcaller}.floria.{gmode}.{fpreset}.{assembler}.{rtype}.{preset}.fa')
    shell:
        'zcat {input.fasta} > {output}'